#
# SNMP forwarder: Manager part configuration
#
# This file is composed of a set of option/value pairs possibly
# enclosed into blocks. Blocks provide lexical scopes for options.
# Blocks names have no pre-defined meaning and serve as hints
# to human reader.
#
# For example:
#
# global-option: value
#
# outermost-block
# {
#     common-option: value
#
#     more-specific-block
#     {
#         more-specific-option: value
#
#         very-concrete-settings
#         {
#             concrete-option: value
#         }
#     }
# } 
#
# Some options can appear inside a block while some can only be of global
# scope. Options specified inside a block apply to their current scopes as
# well as to all nested scopes unless the same option exists there.
#
# Options are distinguished from values by trailing colon (:). There may be
# several whitespace separated values assigned to option.
#
# The following options are recognized.
#
# Option                    Semantics                                    Scope
# ------                    ---------                                    -----
# config-version            configuration syntax version                 global
# program-name              program name to use this configuration       global
# snmp-debug-categories     SNMP engine component debugging              global
# engine-id                 SNMPv3 engine ID                             any
# transport-domain          identifies SNMP local network endpoint       any
# transport-address         IP:port of target SNMP manager               any
# bind-address              send SNMP packets from this endpoint         any
# engine-id                 SNMP engine ID                               any
# security-model            SNMP security model (0, 1, 3)                any
# security-level            SNMP security level (1, 2, 3)                any
# security-name             SNMP security name                           any
# community-name            SNMPv1/v2c community name                    any
# usm-user                  SNMPv3/USM username                          any
# usm-auth-protocol         SNMPv3/USM authentication protocol           any
# usm-auth-key              SNMPv3/USM authentication key                any
# usm-priv-protocol         SNMPv3/USM privacy protocol                  any
# usm-priv-key              SNMPv3/USM privacy key                       any
# context-engine-id         SNMP Context Engine ID                       any
# context-name              SNMP Context Name                            any
# peer-id                   SNMP target ID                               any
# local-address             trunk connection local endpoint              any
# remote-address            trunk connection peer address                any
# connection-mode           trunking client or server                    any
# secret                    trunk encryption key                         any
# trunk-id                  trunk ID                                     any
# engine-id-pattern         true if EngineId matches this regexp         any
# transport-domain-pattern  true if SNMP peer transport domain 
#                           matches this regexp                          any
# transport-address-pattern true if SNMP peer address matches
#                           this regexp                                  any
# security-model-pattern    true if SNMP peer Security Model matches
#                           this regexp                                  any
# security-name-pattern     true if SNMP peer Security Name matches
#                           this regexp                                  any
# security-level-pattern    true if SNMP peer Security Level matches
#                           this regexp                                  any
# context-engine-id-pattern true if SNMP peer ContextEngineId matches
#                           this regexp                                  any
# context-name-pattern      true if SNMP peer ContextName matches this
#                           regexp                                       any
# original-credentials-id   Distant SNMP peer ID                         any
# matching-trunk-id-list    true if source trunk ID is present in this
#                           list                                         any
# matching-original-credentials-id-list
#                           true if source trunk ID is present in 
#                           this list                                    any
# using-peer-id-list        send SNMP messages to this SNMP peer         any
# 
#
# General configuration strategy is:
#
# 1) Configure SNMP credentials and targets for SNMP Manager part of
#    the Forwarder to communicate with. Each target is identified by
#    peer-id.
# 2) Configure server<->client communication link(s) called "trunks". Both
#    Forwarder client and server could initiate and/or receive trunking
#    connections. Each trunk is identified by a trunk-id which is used 
#    for message routing. Trunk initiator is responsible for trunk ID 
#    definition.
# 3) Describe original SNMP credentials and peers used by the server part
#    of the SNMP Forwarder to communicate with SNMP Managers. Each peer (or
#    a group of them) is identified by original-credentials-id.
# 4) Configure message routing in form of matching-trunk-id-list and
#    matching-original-credentials-id-list options mapped to the
#    contents of using-peer-id-list option. The latter identifies SNMP
#    peer IDs to forward SNMP messages to.
#

config-version: 1
program-name: snmpfwd-client

#snmp-debug-categories: dsp,io

peers-group {
#  context-engine-id: ${context-engine-id}
#  context-name: ${context-name}

  snmp-engine-A {
    engine-id: 0x0102030405070809

    udp {
      transport-domain: 1.3.6.1.6.1.1.1
      bind-address: 0.0.0.0:0

      security-level: 1

      v1 {
        community-name: public
        security-name: public
        security-model: 1

        targets {
          snmplabs {
            transport-address: 195.218.195.228:161
            peer-id: snmplabs-v1
          }

          localhost {
            transport-address: 127.0.0.1:161
            peer-id: localhost-v1
          }
        }
      }

      v2c {
        community-name: abrakadabra
        security-name: abrakadabra
        security-model: 2

        targets {
          snmplabs {
            transport-address: 195.218.195.228:161
            peer-id: snmplabs-v2c
          }

          localhost {
            transport-address: 127.0.0.1:161
            peer-id: localhost-v2c
          }
        }
      }

      v3 {
        security-model: 3

        my-user-1 {
          security-level: 3
          security-name: usr-md5-des

          usm-user: usr-md5-des
          usm-auth-protocol: 1.3.6.1.6.3.10.1.1.2
          usm-auth-key: authkey1
          usm-priv-protocol: 1.3.6.1.6.3.10.1.2.2
          usm-priv-key: privkey1

          targets {
            snmplabs {
              transport-address: 195.218.195.228:161
              peer-id: snmplabs-v3
            }

            localhost {
              transport-address: 127.0.0.1:161
              peer-id: localhost-v3
            }
          }          
        }
      }
    }
  }

  snmp-engine-B {
    engine-id: 0x010203040E0F0103
    context-engine-id: 0x010203040E0F0103
    context-name: "somecontext"

    v3 {
      security-model: 3
      security-level: 3
      security-name: usr-md5-des

      usm-user: usr-md5-des
      usm-auth-protocol: 1.3.6.1.6.3.10.1.1.2
      usm-auth-key: authkey1
      usm-priv-protocol: 1.3.6.1.6.3.10.1.2.2
      usm-priv-key: privkey1

      udpv4 {
        transport-domain: 1.3.6.1.6.1.1.200
        bind-address: 0.0.0.0:0
        
        targets {
          snmplabs {
            transport-address: 195.218.195.228:161
            peer-id: snmplabs-v3-bis
          }

          localhost {
            transport-address: 127.0.0.1:161
            peer-id: localhost-v3-bis
          }
        }
      }
    }
  }
}

trunking-group {
  secret: 1234567890

  clients {
    host-1 {
      local-address: 127.0.0.1
      remote-address: 127.0.0.1:30201
      connection-mode: client
      trunk-id: clienttrunk
    }
  }

  servers {
    interface-1 {
      connection-mode: server
      local-address: 127.0.0.1:30301
      trunk-id: <discover>
    }
  }
}

original-credentials-group {
  context-name-pattern: ""

  snmp-engine-A {
    engine-id-pattern: 0x0102030405070809
    context-engine-id-pattern: 0x0102030405070809

    udp {
      transport-domain-pattern: 1\.3\.6\.1\.6\.1\.1\.100
      transport-address-pattern: 127\.0\.0\.1

      security-level-pattern: 1

      v1 {
        security-name-pattern: public
        security-model-pattern: 1
        original-credentials-id: agent-config-1
      }

      v2c {
        security-name-pattern: abrakadabra
        security-model-pattern: 2
        original-credentials-id: agent-config-1
      }

      v3 {
        security-model-pattern: 3

        my-user-1 {
          security-level-pattern: 3
          security-name-pattern: test.*

          original-credentials-id: agent-config-1

          context-two {
            context-name-pattern: mycontext2
            original-credentials-id: agent-config-2
          }
        }

        my-user-2 {
          security-level-pattern: 1
          security-name-pattern: testuser
          original-credentials-id: agent-config-15
        }
      }
    }
  }

  snmp-engine-B {
    engine-id-pattern: 0x010203040E0F0103
    context-engine-id-pattern: 0x010203040E0F0103

    v3 {
      security-model-pattern: 3
      security-level-pattern: 3
      security-name-pattern: test-user

      udpv4 {
        transport-domain-pattern: 1\.3\.6\.1\.6\.1\.1\.200
        transport-address-pattern: 127\.0\.0\.1

        context-one {
          context-name-pattern: mycontext
          original-credentials-id: config-3
        }

        context-two {
          context-name-pattern: mycontext2
          original-credentials-id: config-4
        }
      }
    }
  }
}

routing-map {
  route-1 {
    matching-trunk-id-list: servertrunk
    matching-original-credentials-id-list: agent-config-1
    using-peer-id-list: snmplabs-v1
  }
  
  route-2 {
    matching-trunk-id-list: clienttrunk
    matching-original-credentials-id-list: agent-config-2
    using-peer-id-list: localhost-v1
  }
}
