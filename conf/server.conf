#
# SNMP forwarder: Agent part configuration
#
# This file is composed of a set of option/value pairs possibly
# enclosed into blocks. Blocks provide lexical scopes for options.
# Blocks names have no pre-defined meaning and serve as hints
# to human reader.
#
# For example:
#
# global-option: value
#
# outermost-block
# {
#     common-option: value
#
#     more-specific-block
#     {
#         more-specific-option: value
#
#         very-concrete-settings
#         {
#             concrete-option: value
#         }
#     }
# }
#
# Some options can appear inside a block while some can only be of global
# scope. Options specified inside a block apply to their current scopes as
# well as to all nested scopes unless the same option exists there.
#
# Options are distinguished from values by trailing colon (:). There may be
# several whitespace separated values assigned to option.
#
# The following options are recognized.
#
# Option                    Semantics                                    Scope
# ------                    ---------                                    -----
# config-version            configuration syntax version                 global
# program-name              program name to use this configuration       global
# snmp-debug-categories     SNMP engine component debugging              global
# engine-id                 SNMPv3 engine ID                             any
# transport-domain          identifies SNMP local network endpoint       any
# transport-address         SNMP Agent listens at this endpoint          any
# engine-id                 SNMP engine ID                               any
# security-model            SNMP security model (0, 1, 3)                any
# security-level            SNMP security level (1, 2, 3)                any
# security-name             SNMP security name                           any
# community-name            SNMPv1/v2c community name                    any
# usm-user                  SNMPv3/USM username                          any
# usm-auth-protocol         SNMPv3/USM authentication protocol           any
# usm-auth-key              SNMPv3/USM authentication key                any
# usm-priv-protocol         SNMPv3/USM privacy protocol                  any
# usm-priv-key              SNMPv3/USM privacy key                       any
# credentials-id            SNMP credentials ID                          any
# context-engine-id         SNMP Context Engine ID                       any
# context-name              SNMP Context Name                            any
# context-id                SNMP context configuration entry ID          any
# pdu-type-pattern          SNMP PDU type (SET/GET/GETNEXT/GETBULK)      any
# oid-prefix-pattern-list   list of OIDs regexps to match OIDs in SNMP
#                           PDU var-binds                                any
# content-id                SNMP PDU configuration entry ID              any
# transport-address-pattern-list
#                           true if SNMP Manager is sending packets from
#                           transport endpoints that match these regexps any
# peer-id                   SNMP peer ID                                 any
# local-address             trunk connection local endpoint              any
# remote-address            trunk connection peer address                any
# connection-mode           trunking client or server                    any
# secret                    trunk encryption key                         any
# trunk-id                  trunk ID                                     any
# matching-context-id-list  true if incoming SNMP message is targeted
#                           to this SNMP Context                         any
# matching-content-id-list  true if incoming SNMP PDU is of specified 
#                           type and carries specified OID(s) in 
#                           arbitrary order                              any
# matching-credentials-id-list
#                           true if incoming SNMP message is using
#                           credentials from this list                   any
# matching-peer-id-list     true if incoming SNMP message is sent
#                           by a SNMP Manager from this list             any
# using-trunk-id-list       Pass SNMP message to Forwarder Manager(s)
#                           through trunk(s) in this list                any
#
# General configuration strategy is:
#
# 1) Configure SNMP credentials and SNMP Agent(s) listening for SNMP
#    Managers to communicate with. Each Agent is identified by
#    credentials-id.
# 2) Configure SNMP contexts. Each SNMP context is identified by context-id
#    option.
# 3) Configure individual SNMP Managers or groups of Managers. Each Manager
#    or group is identified by the peer-id option.
# 4) Configure server<->client communication link(s) called "trunks". Both
#    Forwarder client and server could initiate and/or receive trunking
#    connections. Each trunk is identified by a trunk-id which is used
#    for message routing. Trunk initiator is responsible for trunk ID
#    definition.
# 5) Configure message routing in form of matching-credentials-id-list,
#    matching-peer-id-list and matching-context-id-list options mapped to the
#    contents of using-trunk-id-list. The latter identifies Manager part(s)
#    of SNMP Forwarder to pass received SNMP message over.
#

config-version: 1
program-name: snmpfwd-server

#snmp-debug-categories: dsp,io

credentials-group {
  snmp-engine-A {
    engine-id: 0x0102030405070809

    udp {
      transport-domain: 1.3.6.1.6.1.1.100
      transport-address: 127.0.0.1:1161

      security-level: 1

      v1 {
        community-name: public
        security-name: public
        security-model: 1
        credentials-id: config-1
      }

      v2c {
        community-name: abrakadabra
        security-name: abrakadabra
        security-model: 2
        credentials-id: config-2
      }

      v3 {
        security-model: 3

        my-user-1 {
	  security-level: 3
          security-name: test-user

          usm-user: test-user
          usm-auth-protocol: 1.3.6.1.6.3.10.1.1.2
          usm-auth-key: authkey1
          usm-priv-protocol: 1.3.6.1.6.3.10.1.2.2
          usm-priv-key: privkey1

          credentials-id: config-121
        }

        my-user-2 {
          security-level: 1
          security-name: testuser
          usm-user: testuser21
          credentials-id: config-15
        }
      }
    }
  }

  snmp-engine-B {
    engine-id: 0x010203040E0F0103

    v3 {
      security-model: 3
      security-level: 3
      security-name: test-user

      usm-user: test-user
      usm-auth-protocol: 1.3.6.1.6.3.10.1.1.2
      usm-auth-key: authkey1
      usm-priv-protocol: 1.3.6.1.6.3.10.1.2.2
      usm-priv-key: privkey1

      udpv4 {
        transport-domain: 1.3.6.1.6.1.1.200
        transport-address: 127.0.0.1:1163
           
        credentials-id: config-3
      }
    }
  }
}

context-group {
  context-engine-id-pattern: .*
  context-name-pattern: .*
  context-id: any-context
}

content-group {
  pdu-type-pattern: .*
  oid-prefix-pattern-list: 1\.3\.6\..*

  # ordering of oid-prefix-pattern-list is important here

  write-pdu-group {
    pdu-type-pattern: SET
    content-id: set-content
  }

  if-subtree-group {
    oid-prefix-pattern-list: 1\.3\.6\.1\.2\.1\.2\..*
    content-id: if-subtree-content
  }
  
  others {
    content-id: any-content
  }
}

peers-group {
  transport-domain: 1.3.6.1.6.1.1.100

  my-managers {
    transport-address-pattern-list: .*
    peer-id: 100
  }
}

trunking-group {
  secret: 1234567890

  clients {
    host-1 {
      local-address: 127.0.0.1
      remote-address: 127.0.0.1:30301
      connection-mode: client
      trunk-id: servertrunk
    }
  }

  servers {
    interface-1 {
      connection-mode: server
      local-address: 127.0.0.1:30201
      trunk-id: <discover>
    }
  }
}

routing-map {
  matching-context-id-list: any-context
  matching-content-id-list: any-content

  route-1 {
    matching-credentials-id-list: config-1 config-2 config-121
    matching-content-id-list: if-subtree-content
    matching-peer-id-list: 100 111
    using-trunk-id-list: clienttrunk
  }

  route-2 {
    matching-credentials-id-list: config-1 config-121
    matching-peer-id-list: 100
    using-trunk-id-list: servertrunk
  }
  
  route-3 {
    matching-credentials-id-list: config-2
    matching-content-id-list: set-content
    matching-peer-id-list: 111 100
    using-trunk-id-list: clienttrunk
  }
}
